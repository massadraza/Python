from collections import Counter

text = "In this example we are going to learn how to build a word counter. This can basically take words from the website and be able to count how many times they appear and arrange them. To first start we are going to need to import some modules. The modules that we need to import in order for this word counter to work is import requests, from bs4 import BeautifulSoup, and import operator. Now in this word counter it’s going to have 3 functions. Lets first make the first function. And I will name it start since we are starting the word counter from here. Now in the parantheses we need to put url because when we are calling the function we need to input the url there. Now we need to create a word list. In this word list the program will put all of the words there. Now we need to connect to the web page. So we need to type source_code = requests.get(url).text Now we want to use the module Beautifulsoup and be able to work with the soup. So we need to type soup = BeautifulSoup (source_code, features= “html.parser” Now we need to be more specific in what we want to count. In this example I am going to use Buzzfeed and take the links from that webpage. So we need to make a for loop. So we type for website_text in soup.findAll and in the paranthese we need to write the properties of the text from the HTML of the website. Since it was a link we write a and then write the property which is the class and the type of text it is. So my example will look like, for website_text in soup.findAll(‘a’, {‘class’: ‘js-card_link link-gray}) Since we only want the text and not the html we need to make a if statement. Type if website_text.string is not None: content = website_text.string. Now since it’s a word counter we need to split the words line by line. So we need to type words = content.lower().string() Now we want to add these clean words in to the word list so we need to type, for each_word in words: word_list.append(each_word). So when we run the word counter we still get all the excess symbols that we don’t want and that make the text look dirty. Now we need to make a function which can clean up these excess symbols. Before we start writing a new function we need to call it in the function start by clean_up_list(word_list). Now we need to create a function called clean_up_list(word_list). The parameter is word_list because all the dirty words are located in the variable word_list. Now in this function we need to create another list which will store all the clean words which is called clean_word_list. So what we need to type is clean_word_list = [] Now we need to create a for loop. This for loop is going to remove all the excess amount symbols that we don’t need. So we type for word in word_list:. And after that we need to create a variable called symbols and what this variable will store is all the symbols. And then after that we need to create another for loop in the current for loop which will replace the symbols with no text. So we need to type for x in range(len(symbols)): word = word.replace(symbols[x], “”)  What this does it will look for symbols in the text and if it sees symbols it will replace the symbols with nothing. But now theres another issue. Some words in the text could also just be only symbols and once they are deleted, the program will still think it’s a word with no characters. What we need to do in that case is create an if statement which will only add words to the clean_word_list that have more than 0 characters. So we need to type if len(word) > 0: clean_word_list.append(word) Now for the last function that we want to make, we want to make the program be able to count how many times does each word pop up. Like the word the pops up 101 times. Something like that. So before we start making the new function we need to call the function in the function called clean_up_list. This function is called create_dictionary and the parameter is the clean_word_list that we previously made. Now after creating the function we need to make another list called word_count andequal it to {}. Now we need to create a for loop which is going to tell us how many times does that word pop up. So we type for word in word_count:, then after that we need to write an if statement which states if the word is seen add the value one to it but if it’s only seen once only equal that word to the value of one. So we type, if word in word_count: word_count[word] += 1. Else: word_count[word] = 1. Now we need to actually sort the dictionary. And to do that, we need to create a for loop. So we type for key, value in sorted(word_count.items(), key=operator.itemgetter(1)): What this does is it sorts the key and the value. The key is the word and the value is the number or the frequency. The reason why we input 1 which is organize why value is because we want to organize it from the words that pop up the least to the words that pop up the most. If you put 0 it will follow the organization by alphabetical order. Now we need to print it so we type print(key, “:” ,value) Now when we run it the entire program works!"
word = text.split() 

counter = Counter(word)

top_three = counter.most_common(3) 
print(top_three) 

# Learning how to find the most frequent words in a piece of text.

